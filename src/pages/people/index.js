import Head from "next/head";
import LayoutLight from "@/components/Layout/LayoutLight";
import Spacer from "@/components/BaseElements/Spacer";
import React, {useEffect, useRef, useState} from "react";
import styles from "./people.module.scss";
import {useRouter} from "next/router";
import {peopleGroup} from "@/mockData/peopleGroup";
import Photo from "@/components/BaseElements/Photo";
import PersonTile from "@/components/Cards/PersonTile/PersonTile";

const groupNames = peopleGroup.map((group => group.group));

const generatePeople = (group) =>
    Array.from({ length: 8 }, (_, i) => ({
        name: `${group} - Person ${i + 1}`,
        id: `${group}-${i}`,
    }));

export default function PeoplePage() {
    const sectionRefs = useRef([]);
    const [activeGroup, setActiveGroup] = useState(groupNames[0]);
    const router = useRouter();

    // 🔁 Scroll to section on click with offset
    const scrollToGroup = (index) => {
        const ref = sectionRefs.current[index];
        if (ref) {
            const offset = 150;
            const elementTop = ref.getBoundingClientRect().top + window.scrollY;
            const scrollTo = elementTop - offset;

            window.scrollTo({ top: scrollTo, behavior: "smooth" });

            // Sync to URL hash
            const group = groupNames[index];
            const slug = encodeURIComponent(group.toLowerCase().replaceAll(' ', '-'));
            router.replace(`#${slug}`, undefined, { shallow: true });
        }
    };

    // 🔁 Handle scroll tracking and set active group
    useEffect(() => {
        const offset = 150;

        const onScroll = () => {
            const scrollPos = window.scrollY + offset + 1;
            for (let i = sectionRefs.current.length - 1; i >= 0; i--) {
                const ref = sectionRefs.current[i];
                if (ref) {
                    const top = ref.offsetTop;
                    if (scrollPos >= top) {
                        const group = groupNames[i];
                        setActiveGroup((prev) => {
                            if (prev !== group) {
                                const currentHash = decodeURIComponent(window.location.hash.substring(1));
                                const newHash = group.toLowerCase().replaceAll(' ', '-')
                                if (currentHash !== newHash) {
                                    router.replace(`#${encodeURIComponent(newHash)}`, undefined, { shallow: true });
                                }
                            }
                            return group;
                        });
                        break;
                    }
                }
            }
        };

        window.addEventListener("scroll", onScroll, { passive: true });
        return () => window.removeEventListener("scroll", onScroll);
    }, []);

    // ⬇️ On page load, scroll to section from hash
    useEffect(() => {
        const hash = decodeURIComponent(window.location.hash.substring(1));
        const index = groupNames.findIndex((name) => name.toLowerCase().replaceAll(' ', '-') === hash);
        if (index !== -1) {
            setTimeout(() => scrollToGroup(index), 300); // slight delay for layout to settle
        }
    }, []);

    return (
        <>
            <Head>
                <title>Labour History Activism</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <div className={styles.Section}>
                <header className={styles.Header}>
                    {groupNames.map((group, index) => (
                        <p
                            key={group}
                            className={`${styles.GroupButton} ${
                                activeGroup === group ? styles.Active : ""
                            }`}
                            onClick={() => scrollToGroup(index)}
                        >
                            {group}
                        </p>
                    ))}
                </header>

                <main className={styles.Main}>
                    {peopleGroup.map((group, index) => (
                        <section
                            key={group['id']}
                            ref={(el) => (sectionRefs.current[index] = el)}
                            className={styles.GroupSection}
                        >
                            <div className={styles.GroupHeader}>
                                <h2 className={styles.GroupTitle}>{group['group']}</h2>
                                <p className={styles.GroupDescription}>{group['description']}</p>
                            </div>
                            <Spacer size={'xl'}/>
                            <div className={styles.PeopleGrid}>
                            {generatePeople(group).map((person) => (
                                 <PersonTile key={person.id} person={person} />
                                ))}
                            </div>
                            <Spacer size={'xl'}/>
                        </section>
                    ))}
                </main>
            </div>
        </>
    )
}

PeoplePage.getLayout = function getLayout(page) {
    return (
        <LayoutLight>
            {page}
        </LayoutLight>
    )
}